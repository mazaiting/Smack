package com.mazaiting.smackim.model.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mazaiting.smackim.model.bean.NewFriend;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_FRIEND".
*/
public class NewFriendDao extends AbstractDao<NewFriend, Long> {

    public static final String TABLENAME = "NEW_FRIEND";

    /**
     * Properties of entity NewFriend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Jid = new Property(1, String.class, "jid", false, "JID");
        public final static Property Priority = new Property(2, int.class, "priority", false, "PRIORITY");
        public final static Property Status = new Property(3, String.class, "status", false, "STATUS");
        public final static Property Mode = new Property(4, String.class, "mode", false, "MODE");
        public final static Property Type = new Property(5, String.class, "Type", false, "TYPE");
    }


    public NewFriendDao(DaoConfig config) {
        super(config);
    }
    
    public NewFriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_FRIEND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"JID\" TEXT," + // 1: jid
                "\"PRIORITY\" INTEGER NOT NULL ," + // 2: priority
                "\"STATUS\" TEXT," + // 3: status
                "\"MODE\" TEXT," + // 4: mode
                "\"TYPE\" TEXT);"); // 5: Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_FRIEND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewFriend entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(2, jid);
        }
        stmt.bindLong(3, entity.getPriority());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(5, mode);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(6, Type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewFriend entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(2, jid);
        }
        stmt.bindLong(3, entity.getPriority());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(5, mode);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(6, Type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public NewFriend readEntity(Cursor cursor, int offset) {
        NewFriend entity = new NewFriend( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jid
            cursor.getInt(offset + 2), // priority
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewFriend entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setJid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPriority(cursor.getInt(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewFriend entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewFriend entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewFriend entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
